from Crypto.Util.number import GCD, bytes_to_long, long_to_bytes
import gmpy2

def crt(list_a, list_m):
    """
    Reference: https://crypto.stanford.edu/pbc/notes/numbertheory/crt.html
    Returns the output after computing Chinese Remainder Theorem on

    x = a_1 mod m_1
    x = a_2 mod m_2
    ...
    x = a_n mod m_n

    input parameter list_a = [a_1, a_2, ..., a_n]
    input parameter list_m = [m_1, m_2, ..., m_n]

    Returns -1 if the operation is unsuccessful due to some exceptions
    """
    try:
        assert len(list_a) == len(list_m)
    except:
        print("[+] Length of list_a should be equal to length of list_m")
        return -1
    for i in range(len(list_m)):
        for j in range(len(list_m)):
            if GCD(list_m[i], list_m[j])!= 1 and i!=j:
                print("[+] Moduli should be pairwise co-prime")
                return -1
    M = 1
    for i in list_m:
        M *= i
    list_b = [M/i for i in list_m]
    assert len(list_b) == len(list_m)
    try:
        list_b_inv = [int(gmpy2.invert(list_b[i], list_m[i])) for i in range(len(list_m))]
    except:
        print("[+] Encountered an unusual error while calculating inverse using gmpy2.invert()")
        return -1
    x = 0
    for i in range(len(list_m)):
        x += list_a[i]*list_b[i]*list_b_inv[i]
    return x % M


def test_crt():
    """
    Checking the validity and consistency of CRT function
    """
    list_a = [[2, 3], [1, 2, 3, 4], [6, 4]]
    list_m = [[5, 7], [5, 7, 9, 11], [7, 8]]
    soln_list = [17, 1731, 20]
    try:
        for i in range(len(list_a)):
            assert crt(list_a[i], list_m[i]) == soln_list[i]
    except:
        print("[+] CRT function broken. Check the function again!")


def hastad_unpadded(ct_list, mod_list, e):
    """
    Implementing Hastad's Broadcast Attack
    """
    m_expo = crt(ct_list, mod_list)
    if m_expo != -1:
        eth_root = gmpy2.iroot(m_expo, e)
        if eth_root[1] == False:
            print ("[+] Cannot calculate e'th root!")
            return -1
        elif eth_root[1] == True:
            return long_to_bytes(eth_root)
    else:
        print ("[+] Cannot calculate CRT")
        return -1

nlst = [8116688450216238118314150070228620713703774935085401348595764443628580914712390069365629829635611020946567129655700240238207781076008771357061128668740609, 9392152049795776922038025831819902532107584015783154020847182401496662158008402302934043448259590675634686252334296410464379782627415762304455912788158537, 4800164926339337165162037686514766795451939581656444598718405708806449258161060285928366827677609984369696937905568154498308668075264774834293176894316221, 6548938377658665641080123361939747875982562031014661342858295612020942420152426110969903562779821435914707946016366759139147846520978783914061568119233231, 8666896824498349656949742129110009373496064636838468293740957824933388402310927604922601921423132416233639418101513017962292692127299569322461499685232267, 6952049483638464675205381408680030918603184149650118307960708319539201341600733055765342293868803510037267739266112395429360214375716873952506355369943657, 6020551887031768242133384796102824465866650076123973194600060533063763886515809079547476277251582073715515803808717000886261601882642704337006723883506671, 10760233804599690806305232069201779999849926375518868193685022352998156239084513100363665623271119921508036506710022757073918127219410855550436847062469007, 9964020870044642117844928166393635319821550933755621896965438748177635410855044725310240717238132863769373343855888062334219991483099112934360786389196679, 10459812986687093164928627381362607751281046752539212858395576023638068693725421223197988674104121785685179470465400083022309590084664452127620466513480723]
ctlst = [5900373971350167943684189906249249367821750159722306842441765497218071582665097123438854078911783867413817180008391181857162650006831151349704009931584610, 2203154138890430306543340895783643379408531047436202526729460625613459279851606211282166550485843457434672407427880927664700739723886516358947836554111159, 3573626958862002224578677884780759541495098641226906705268340793275519840922964251277077272653988268097412801375089828189727718241011349639454139968150891, 4538191532994972262266312920701123544151131227514118741826730292106893960170487335802055733982764372074270136256886494614270618115672795420984776311083027, 2085334123775609235963837180655295074115480271064874460943927497754243953421155326287434442546830066890867568148365277945408229745305363313615837297607260, 4332808322499265817643185059369843618185502620556335280481541676726367859675455257694698977998130023428848814675395493642891919553615190531850669593834666, 3502919553717714034482998132413315971318352043962945236289941999192623860529927396844429074284759861316581309559197133422403013646284817390736856658747758, 3052821953299139613024839003232345538915239591440045615941589720429043202357843405308982966438787052539365212914261837464809495917335561525358640491507232, 2467720429942563128326579202667344076487923844378597278278053263799649140364717993924707171858121257956251682579182840728310577427635612310693435479432144, 2842950330567480602504629630635892797048932962196210209125747249342687464714686767996583904402351887474017814880241612733420114160878902555541523923039038]

hastad_unpadded(ctlst, nlst, 3  )